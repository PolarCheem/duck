local Library = {}

local Player = game:GetService("Players").LocalPlayer
local TS, UIS, mouse = game:GetService("TweenService"), game:GetService("UserInputService"), Player:GetMouse()

local settings = {
	togglebind = Enum.KeyCode.RightShift,
	accent = Color3.fromRGB(106, 90, 205)
}

function Library:Create(name, subname, keybind)
	if game.CoreGui:FindFirstChild(name) then
		game.CoreGui:FindFirstChild(name):Destroy()
	end

	local xz = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local Title = Instance.new("TextLabel")
	local SubTitle = Instance.new("TextLabel")
	local TabsHolder = Instance.new("Frame")
	local UIListLayout = Instance.new("UIListLayout")
	local PageHolder = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local UICorner_2 = Instance.new("UICorner")

	-- Set up ScreenGui
	xz.Name = name
	xz.Parent = game.CoreGui
	xz.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	-- Set up Main Frame
	Main.Name = "Main"
	Main.Parent = xz
	Main.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	Main.BorderSizePixel = 0
	Main.Position = UDim2.new(0, 192, 0, 224)
	Main.Size = UDim2.new(0, 645, 0, 366)
	Main.Draggable = true

	-- Set up Title
	Title.Name = "Title"
	Title.Parent = Main
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.Position = UDim2.new(0.0093, 0, 0, 0)
	Title.Size = UDim2.new(0, 179, 0, 34)
	Title.Font = Enum.Font.GothamBold
	Title.Text = name
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.TextSize = 24.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	-- Set up SubTitle
	SubTitle.Name = "SubTitle"
	SubTitle.Parent = Main
	SubTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SubTitle.BackgroundTransparency = 1.000
	SubTitle.Position = UDim2.new(0.0093, 0, 0.0929, 0)
	SubTitle.Size = UDim2.new(0, 179, 0, 18)
	SubTitle.Font = Enum.Font.Gotham
	SubTitle.Text = subname
	SubTitle.TextColor3 = Color3.fromRGB(157, 157, 157)
	SubTitle.TextSize = 12.000
	SubTitle.TextXAlignment = Enum.TextXAlignment.Left

	-- Set up TabsHolder
	TabsHolder.Name = "TabsHolder"
	TabsHolder.Parent = Main
	TabsHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabsHolder.BackgroundTransparency = 1.000
	TabsHolder.BorderSizePixel = 0
	TabsHolder.Position = UDim2.new(0.0093, 0, 0.1585, 0)
	TabsHolder.Size = UDim2.new(0, 179, 0, 302)

	UIListLayout.Parent = TabsHolder
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 8)

	-- Set up PageHolder
	PageHolder.Name = "PageHolder"
	PageHolder.Parent = Main
	PageHolder.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
	PageHolder.BorderSizePixel = 0
	PageHolder.Position = UDim2.new(0.2977, 0, 0.0191, 0)
	PageHolder.Size = UDim2.new(0, 447, 0, 353)

	UICorner.CornerRadius = UDim.new(0, 4)
	UICorner.Parent = PageHolder

	UICorner_2.CornerRadius = UDim.new(0, 4)
	UICorner_2.Parent = Main

	-- Drag functionality
	function dragify(Frame)
		local dragToggle = nil
		local startPos = nil
		local dragStart = nil
		local dragInput = nil

		local function updateInput(input)
			local delta = input.Position - dragStart
			local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TS:Create(Frame, TweenInfo.new(0.25), { Position = position }):Play()
		end

		Frame.InputBegan:Connect(function(input)
			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
				dragToggle = true
				dragStart = input.Position
				startPos = Frame.Position
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragToggle = false
					end
				end)
			end
		end)

		Frame.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)

		UIS.InputChanged:Connect(function(input)
			if input == dragInput and dragToggle then
				updateInput(input)
			end
		end)
	end
	
	dragify(Main)

	-- Toggle visibility with keybind
	UIS.InputBegan:Connect(function(key, gameProcessedEvent)
		if not gameProcessedEvent then
			if key == settings.togglebind then
				Main.Visible = not Main.Visible
			end
		end
	end)

	local Window = {}
	function Window:tab(tabname, showonstartup)
		local Tab = Instance.new("TextButton")
		Tab.Name = "Tab"
		Tab.Parent = TabsHolder
		Tab.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
		Tab.BorderSizePixel = 0
		Tab.Size = UDim2.new(0, 179, 0, 26)
		Tab.Font = Enum.Font.Gotham
		Tab.Text = tabname
		Tab.TextColor3 = Color3.fromRGB(255, 255, 255)
		Tab.TextSize = 14.000

		local UICorner_Tab = Instance.new("UICorner")
		UICorner_Tab.CornerRadius = UDim.new(0, 4)
		UICorner_Tab.Parent = Tab

		-- Create a page
		local Page = Instance.new("Frame")
		Page.Name = "Page"
		Page.Parent = PageHolder
		Page.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
		Page.BorderSizePixel = 0
		Page.Size = UDim2.new(0, 447, 0, 353)

		local UICorner_Page = Instance.new("UICorner")
		UICorner_Page.CornerRadius = UDim.new(0, 4)
		UICorner_Page.Parent = Page

		-- Create the page container
		local PageContainer = Instance.new("ScrollingFrame")
		PageContainer.Name = "PageContainer"
		PageContainer.Parent = Page
		PageContainer.Active = true
		PageContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		PageContainer.BackgroundTransparency = 1.000
		PageContainer.BorderSizePixel = 0
		PageContainer.Position = UDim2.new(0.0134, 0, 0.0198, 0)
		PageContainer.Size = UDim2.new(0, 435, 0, 339)
		PageContainer.ScrollBarThickness = 0

		local UIListLayout_Page = Instance.new("UIListLayout")
		UIListLayout_Page.Parent = PageContainer
		UIListLayout_Page.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout_Page.Padding = UDim.new(0, 8)

		-- Show or hide the page on startup
		if showonstartup then
			Page.Visible = true
			Tab.TextTransparency = 0
		else
			Page.Visible = false
			Tab.TextTransparency = 0.5
		end

		Tab.MouseButton1Click:Connect(function()
			for _, v in pairs(PageHolder:GetChildren()) do
				if v:IsA("Frame") then
					v.Visible = false
				end
			end
			for _, z in pairs(TabsHolder:GetChildren()) do
				if z:IsA("TextButton") then
					z.TextTransparency = 0.5
				end
			end
			Page.Visible = true
			Tab.TextTransparency = 0
		end)

		local pageItems = {}

		-- Create label
		function pageItems:label(text)
			local Label = Instance.new("Frame")
			local UICorner = Instance.new("UICorner")
			local LabelText = Instance.new("TextLabel")
			Label.Name = "Label"
			Label.Parent = PageContainer
			Label.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Label.BorderSizePixel = 0
			Label.Size = UDim2.new(1, 0, 0, 30)

			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = Label

			LabelText.Name = "LabelText"
			LabelText.Parent = Label
			LabelText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			LabelText.BackgroundTransparency = 1.000
			LabelText.Size = UDim2.new(1, 0, 1, 0)
			LabelText.Font = Enum.Font.Gotham
			LabelText.Text = text
			LabelText.TextColor3 = Color3.fromRGB(255, 255, 255)
			LabelText.TextSize = 14.000
			LabelText.TextXAlignment = Enum.TextXAlignment.Left
		end

		-- Create button
		function pageItems:button(text, callback)
			local Button = Instance.new("TextButton")
			Button.Name = "Button"
			Button.Parent = PageContainer
			Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Button.BorderSizePixel = 0
			Button.Size = UDim2.new(1, 0, 0, 30)
			Button.Font = Enum.Font.Gotham
			Button.Text = text
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.TextSize = 14.000

			local UICorner_Button = Instance.new("UICorner")
			UICorner_Button.CornerRadius = UDim.new(0, 4)
			UICorner_Button.Parent = Button

			Button.MouseButton1Click:Connect(function()
				if callback then
					callback()
				end
			end)
		end

		-- Create toggle
		function pageItems:toggle(text, default, callback)
			local Toggle = Instance.new("Frame")
			local UICorner = Instance.new("UICorner")
			local ToggleButton = Instance.new("TextButton")
			local ToggleLabel = Instance.new("TextLabel")

			Toggle.Name = "Toggle"
			Toggle.Parent = PageContainer
			Toggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Toggle.BorderSizePixel = 0
			Toggle.Size = UDim2.new(1, 0, 0, 30)

			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = Toggle

			ToggleLabel.Name = "ToggleLabel"
			ToggleLabel.Parent = Toggle
			ToggleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ToggleLabel.BackgroundTransparency = 1.000
			ToggleLabel.Size = UDim2.new(0.8, 0, 1, 0)
			ToggleLabel.Font = Enum.Font.Gotham
			ToggleLabel.Text = text
			ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			ToggleLabel.TextSize = 14.000
			ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

			ToggleButton.Name = "ToggleButton"
			ToggleButton.Parent = Toggle
			ToggleButton.BackgroundColor3 = default and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(211, 47, 47)
			ToggleButton.BorderSizePixel = 0
			ToggleButton.Size = UDim2.new(0.2, 0, 0.8, 0)
			ToggleButton.Position = UDim2.new(0.8, 0, 0.1, 0)
			ToggleButton.Text = ""
			
			local UICorner_ToggleButton = Instance.new("UICorner")
			UICorner_ToggleButton.CornerRadius = UDim.new(0, 4)
			UICorner_ToggleButton.Parent = ToggleButton

			ToggleButton.MouseButton1Click:Connect(function()
				default = not default
				ToggleButton.BackgroundColor3 = default and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(211, 47, 47)
				if callback then
					callback(default)
				end
			end)

			-- Set the initial state
			ToggleButton.BackgroundColor3 = default and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(211, 47, 47)
		end

-- Create dropdown
function pageItems:dropdown(text, options, callback)
    local Dropdown = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local DropdownButton = Instance.new("TextButton")
    local DropdownList = Instance.new("Frame")
    local ListLayout = Instance.new("UIListLayout")
    local Open = false

    Dropdown.Name = "Dropdown"
    Dropdown.Parent = PageContainer
    Dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Dropdown.BorderSizePixel = 0
    Dropdown.Size = UDim2.new(1, 0, 0, 30)

    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Dropdown

    DropdownButton.Name = "DropdownButton"
    DropdownButton.Parent = Dropdown
    DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    DropdownButton.BorderSizePixel = 0
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.Font = Enum.Font.Gotham
    DropdownButton.Text = text
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.TextSize = 14.000

    DropdownList.Name = "DropdownList"
    DropdownList.Parent = Dropdown
    DropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    DropdownList.BorderSizePixel = 0
    DropdownList.Size = UDim2.new(1, 0, 0, 0)
    DropdownList.Visible = false

    ListLayout.Parent = DropdownList
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    -- Function to update the dropdown button text
    local function updateDropdown(text)
        DropdownButton.Text = text
        if callback then
            callback(text)
        end
    end

    -- Create list items
    for _, option in ipairs(options) do
        local ListItem = Instance.new("TextButton")
        ListItem.Name = option
        ListItem.Parent = DropdownList
        ListItem.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        ListItem.BorderSizePixel = 0
        ListItem.Size = UDim2.new(1, 0, 0, 30)
        ListItem.Font = Enum.Font.Gotham
        ListItem.Text = option
        ListItem.TextColor3 = Color3.fromRGB(255, 255, 255)
        ListItem.TextSize = 14.000

        ListItem.MouseButton1Click:Connect(function()
            updateDropdown(option)
            DropdownList.Visible = false
            Open = false
        end)
    end

    DropdownButton.MouseButton1Click:Connect(function()
        Open = not Open
        DropdownList.Visible = Open
        DropdownList.Size = Open and UDim2.new(1, 0, 0, #options * 30) or UDim2.new(1, 0, 0, 0)
    end)
end



		return pageItems
	end

	return Window
end

return Library
