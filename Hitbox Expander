local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Configuration
local MAX_ANGLE = 30 -- Degrees from center to consider "in view"
local MAX_DISTANCE = 100 -- Max distance to consider
local SMOOTHNESS = 0.2 -- Lower is smoother (0.1-0.5 recommended)
local TEAM_CHECK = true -- Set to false to look at any player

-- State variables
local isLookingActive = false
local lastTarget = nil

-- Create the UI (using your original button setup)
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = localPlayer.PlayerGui

-- Create the toggle button (similar to your original style)
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "LookToggleButton"
toggleButton.Size = UDim2.new(0, 100, 0, 40)
toggleButton.Position = UDim2.new(0.5, 0, 0.3, 0)
toggleButton.Text = "Enable Look"
toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Parent = screenGui
toggleButton.Draggable = true

-- Function to find the closest teammate in view
local function getClosestTeammateInView()
    if not camera then return nil end
    
    local cameraCFrame = camera.CFrame
    local cameraLookVector = cameraCFrame.LookVector
    local cameraPosition = cameraCFrame.Position
    
    local closestPlayer = nil
    local closestDistance = MAX_DISTANCE
    local smallestAngle = MAX_ANGLE
    
    for _, player in ipairs(Players:GetPlayers()) do
        -- Skip if it's the local player or not same team (when team check is enabled)
        if player == localPlayer then continue end
        if TEAM_CHECK and player.Team ~= localPlayer.Team then continue end
        
        if player.Character then
            local targetHead = player.Character:FindFirstChild("Head")
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            
            if targetHead and humanoid and humanoid.Health > 0 then
                local distance = (targetHead.Position - cameraPosition).Magnitude
                if distance <= MAX_DISTANCE then
                    local direction = (targetHead.Position - cameraPosition).Unit
                    local angle = math.deg(math.acos(direction:Dot(cameraLookVector)))
                    
                    -- Prioritize players that are both close and centered in view
                    if angle < smallestAngle or (angle == smallestAngle and distance < closestDistance) then
                        smallestAngle = angle
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

-- Toggle the look functionality
local function toggleLookFunction()
    isLookingActive = not isLookingActive
    
    if isLookingActive then
        toggleButton.Text = "Disable Look"
        toggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    else
        toggleButton.Text = "Enable Look"
        toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        lastTarget = nil
    end
end

-- Connect the button click event
toggleButton.MouseButton1Click:Connect(toggleLookFunction)

-- Optional: Add keybind support (T key to toggle)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.T then
        toggleLookFunction()
    end
end)

-- Main update loop
RunService.Heartbeat:Connect(function()
    if not isLookingActive then return end

    if not lastTarget or not lastTarget.Character or not lastTarget.Character:FindFirstChild("Head") then
        lastTarget = getClosestTeammateInView()
    end

    if lastTarget and lastTarget.Character then
        local head = lastTarget.Character:FindFirstChild("Head")
        if head then
            local currentCFrame = camera.CFrame
            local targetCFrame = CFrame.new(currentCFrame.Position, head.Position)
            camera.CFrame = currentCFrame:Lerp(targetCFrame, SMOOTHNESS)
        end
    end
end)
